Problem:

You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example:

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.

Solution:

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        int carry = 0;
        int sum = 0;
        int i1 = 0;
        int i2 = 0;
        
        ListNode an1 = new ListNode(0);
        ListNode current = an1;
        while(l1 != null || l2 != null)
        {
            if(l1 == null)
            {
                i1 = 0;
            }
            else
            {
                i1 = l1.val;
                l1 = l1.next;
            }
            
            if(l2 == null)
            {
                i2 = 0;
            }
            else
            {
                i2 = l2.val;
                l2 = l2.next;
            }
            
            sum = i1+i2+carry;
            carry = 0;
            if(sum>9)
            {
                carry = sum/10;
                sum = sum%10;
            }
            
            current.val = sum;
            sum = 0;
            
            if(l1 != null || l2 != null)
            {
                ListNode nw = new ListNode(0);
                current.next = nw;
                current = current.next;
            }
        }
        if(carry!=0)
        {
            ListNode nw = new ListNode(carry);
            current.next = nw;
        }
        return an1;
    }
}