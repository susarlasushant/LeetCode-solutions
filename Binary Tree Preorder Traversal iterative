Problem:

Given a binary tree, return the preorder traversal of its nodes' values.

Example:

Input: [1,null,2,3]
   1
    \
     2
    /
   3

Output: [1,2,3]
Follow up: Recursive solution is trivial, could you do it iteratively?

Solution:

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        
        List<Integer> list = new ArrayList<Integer>();
        if(root == null)
        {
            return list;
        }
        Stack<TreeNode> st = new Stack();
        
        TreeNode head = root;
        st.push(root);
        while(!st.isEmpty())
        {
            root = st.pop();
            list.add(root.val);
            
            if(root.right!=null)
            {
                st.push(root.right);
            }
            if(root.left!=null)
            {
                st.push(root.left);
            }
        }
        return list;
    }
    
}
