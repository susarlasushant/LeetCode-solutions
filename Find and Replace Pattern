Problem:

You have a list of words and a pattern, and you want to know which words in words matches the pattern.

A word matches the pattern if there exists a permutation of letters p so that after replacing every letter x in the pattern with p(x), we get the desired word.

(Recall that a permutation of letters is a bijection from letters to letters: every letter maps to another letter, and no two letters map to the same letter.)

Return a list of the words in words that match the given pattern. 

You may return the answer in any order.

 

Example 1:

Input: words = ["abc","deq","mee","aqq","dkd","ccc"], pattern = "abb"
Output: ["mee","aqq"]
Explanation: "mee" matches the pattern because there is a permutation {a -> m, b -> e, ...}. 
"ccc" does not match the pattern because {a -> c, b -> c, ...} is not a permutation,
since a and b map to the same letter.

Solution:

class Solution {
    public List<String> findAndReplacePattern(String[] words, String pattern) {
        
         HashMap<Character, Character> map = new HashMap<>(); 
        HashSet<Character> hset = new HashSet<Character>(); 
        List<String> ret = new ArrayList<String>();
        
        for(int i = 0;i<words.length;i++)
        {
            if(words[i].length()!=pattern.length())
            {
                continue;
            }
            
            map.clear();
            hset.clear();
            
            for(int j=0;j<words[i].length();j++)
            {
                if(map.containsKey(pattern.charAt(j)))
                {
                    if(words[i].charAt(j)!=map.get(pattern.charAt(j)))
                    {
                        map.clear();
                        break;
                    }
                }
                else
                {
                    if(hset.contains(words[i].charAt(j)))
                    {
                        map.clear();
                        break;
                    }
                    hset.add(words[i].charAt(j));
                    map.put(pattern.charAt(j),words[i].charAt(j));
                }
            }
            
             if (!map.isEmpty())
             {
                 ret.add(words[i]);
             }
        }
        return ret;
        
    }
}
