Problem:

Reverse a linked list from position m to n. Do it in one-pass.

Note: 1 ≤ m ≤ n ≤ length of list.

Example:

Input: 1->2->3->4->5->NULL, m = 2, n = 4
Output: 1->4->3->2->5->NULL

Solution:

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode ReverseBetween(ListNode head, int m, int n) {
        
        ListNode prev = null;
        ListNode start = head;
        ListNode next = null;
        int ctr = 1;
        
        if(m==n)
        {
            return head;
        }
        
        while(ctr<m)
        {
            prev = start;
            start = start.next;
            ctr = ctr+1;
        } 
        
        
        ListNode end = start;
        ListNode tri = null;
        
        
        while(ctr<=n)
        {
            next = start.next;
            start.next = tri;
            tri = start;
            start = next;
            ctr = ctr+1;
        }
        
        end.next = start; 
        
        if(prev==null)
        {
            return tri;
        }
        prev.next = tri;
        
        
        
        return head;
        
    }
}
