Problem:

Given a binary tree, return the inorder traversal of its nodes' values.

Example:

Input: [1,null,2,3]
   1
    \
     2
    /
   3

Output: [1,3,2]
Follow up: Recursive solution is trivial, could you do it iteratively?

Solution:

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        
        Queue<TreeNode> qt = new LinkedList<>();
        List<Integer>  lst = new ArrayList<>();
        
        if(root == null)
        {
            return null;
        }
        
        lst.add(root.val);
        qt.add(root);
        
        while(qt.size()!=0)
        {
            root = qt.remove();
            while(root.left!=null)
            {
                qt.add(root);
                root =root.left;
            }
            
            lst.add(root.val);
            if(root.right!=null)
            {
                qt.add(root.right);
            }
        }
        
        return lst;
        
    }
}
