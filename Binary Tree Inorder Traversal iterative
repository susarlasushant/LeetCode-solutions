Problem:

Given a binary tree, return the inorder traversal of its nodes' values.

Example:

Input: [1,null,2,3]
   1
    \
     2
    /
   3

Output: [1,3,2]
Follow up: Recursive solution is trivial, could you do it iteratively?



Solution :

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        
        List<Integer> ls = new ArrayList<Integer>();
        if(root == null)
        {
            return ls;
        }
        
        Stack st = new Stack();
         
        TreeNode p = root;
        
        while(true)
        {
            while(p!=null)
            {
                st.push(p);
                p=p.left;
            }
            if(st.isEmpty())
            {
                break;
            }
            p = (TreeNode)st.pop();
            ls.add(p.val);
            p = p.right;
        }
        
        return ls;
    }
}
