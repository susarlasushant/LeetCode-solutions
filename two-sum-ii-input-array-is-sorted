Problem:

Given an array of integers that is already sorted in ascending order, find two numbers such that they add up to a specific target number.

The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2.

Note:

Your returned answers (both index1 and index2) are not zero-based.
You may assume that each input would have exactly one solution and you may not use the same element twice.
Example:

Input: numbers = [2,7,11,15], target = 9
Output: [1,2]
Explanation: The sum of 2 and 7 is 9. Therefore index1 = 1, index2 = 2.


Solution:

class Solution {
    public int[] twoSum(int[] numbers, int target) {
        
        int[] ret = new int[2];
        
        if(numbers[0]>target)
        {
            ret[0]=0;
            ret[1]=0;
            return ret;
        }
        System.out.println("yes");
        for(int i=0;i<=numbers.length-1;i++)
        {
            for(int j=i+1;j<=numbers.length-1;j++)
            {
                if(numbers[i]+numbers[j] >target)
                {
                    break;
                }
                if(numbers[i]+numbers[j] == target)
                {
                    ret[0]=i+1;
                    ret[1]=j+1;
                    return ret;
                }
            }
            if(numbers[i]>target)
            {
                break;
            }
        }
        ret[0]=0;
            ret[1]=0;
            return ret;
    }
}
