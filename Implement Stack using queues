Problem:

Implement the following operations of a stack using queues.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
empty() -- Return whether the stack is empty.
Example:

MyStack stack = new MyStack();

stack.push(1);
stack.push(2);  
stack.top();   // returns 2
stack.pop();   // returns 2
stack.empty(); // returns false
Notes:

You must use only standard operations of a queue -- which means only push to back, peek/pop from front, size, and is empty operations are valid.
Depending on your language, queue may not be supported natively. You may simulate a queue by using a list or deque (double-ended queue), as long as you use only standard operations of a queue.
You may assume that all operations are valid (for example, no pop or top operations will be called on an empty stack).

Solution:

class MyStack {
    Queue<Integer> q1;
    Queue<Integer> q2;
    int ctr;
    
    /** Initialize your data structure here. */
    public MyStack() {
        
        q1 = new LinkedList<>();
        q2 = new LinkedList<>();
        ctr = 1;
        
    }
    
    /** Push element x onto stack. */
    public void push(int x) {
        
        if(ctr == 1)
        {
            q1.add(x);
            while(q2.size()!=0)
            {
                int i = q2.remove();
                q1.add(i);
            }
            ctr = 2;
        }
        else
        {
            q2.add(x);
            while(q1.size()!=0)
            {
                int i = q1.remove();
                q2.add(i);
            }
            ctr = 1;
        }
        
    }
    
    /** Removes the element on top of the stack and returns that element. */
    public int pop() {
        
        if(ctr == 2)
        {
            int i=q1.poll();
            return i;
        }
        else
        {
            int i=q2.poll();
            return i;
        }
        
    }
    
    /** Get the top element. */
    public int top() {
         if(ctr == 2)
        {
            int i=q1.peek();
            return i;
        }
        else
        {
            int i=q2.peek();
            return i;
        }
    }
    
    /** Returns whether the stack is empty. */
    public boolean empty() {
         if(ctr == 2)
        {
             if(q1.size()==0)
             {
                 return true;
             }
             else
             {
                 return false;
             }
        }
        else
        {
           if(q2.size()==0)
             {
                 return true;
             }
             else
             {
                 return false;
             }
        }
    }
}

/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack obj = new MyStack();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.top();
 * boolean param_4 = obj.empty();
 */
