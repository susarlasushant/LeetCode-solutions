Problem:

Given a binary tree, return the preorder traversal of its nodes' values.

Example:

Input: [1,null,2,3]
   1
    \
     2
    /
   3

Output: [1,2,3]

Solution:

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        
        List<Integer> list = new ArrayList<Integer>();
        if(root == null)
        {
            return list;
        }
        
        list = preorder(root, list);
        return list;
    }
    
    public List<Integer> preorder(TreeNode root, List<Integer> list)
    {
        if(root == null)
        {
            return list;
        }
        list.add(root.val);
        preorder(root.left,list);
        preorder(root.right,list);
        return list;
    }
}
