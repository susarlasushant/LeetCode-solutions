Problem: 
Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its level order traversal as:
[
  [3],
  [9,20],
  [15,7]
]

Solution:

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public IList<IList<int>> LevelOrder(TreeNode root) {
        
        IList<IList<int>> olist = new List<IList<int>>();
        Queue<TreeNode> qt = new Queue<TreeNode>();
        
        if(root==null)
            return olist;
        
        qt.Enqueue(root);
        
        while(qt.Count!=0)
        {
            IList<int> lst = new List<int>(); 
            int lstct = qt.Count;
            for(int i=0;i<lstct;i++)
            {
                root = qt.Dequeue();
                
                lst.Add(root.val);
                
                if(root.left!=null)
                    qt.Enqueue(root.left);
                if(root.right!=null)
                    qt.Enqueue(root.right);
                    
            }
            
            olist.Add(lst);
            
        }
        
        return olist;
        
    }
}
