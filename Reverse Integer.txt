Problem:

Given a 32-bit signed integer, reverse digits of an integer.

Example 1:

Input: 123
Output: 321
Example 2:

Input: -123
Output: -321
Example 3:

Input: 120
Output: 21
Note:
Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [-2^31,  2^31 - 1]. 
For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.


Solution:

public class Solution {
    public int Reverse(int x) {
        
        
        int inp = x;
        
        if(x==0)
        {
            x=0;
            return x;
        }
        String s = "";
        
        
        
        int div = 0;
        
        for(int i = 9;i>=0;i--)
        {
            div = Math.Abs(x/(int)(Math.Pow(10,i)));
            if (s=="" && div==0)
            {
            }
            else
            {
                s=s+div.ToString();
                x=x%(int)(Math.Pow(10,i));
            }
        }
        
        
        
        char[] arr = s.ToCharArray();
        Array.Reverse(arr);
        s =  new string(arr);
       int.TryParse(s, out div);
        if(inp <0)
        {
            div = 0-div;
        }
        return div;
    }
}